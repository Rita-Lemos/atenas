{"ast":null,"code":"'use strict';\n\nconst jsSHA = require(\"jssha\");\n\nconst api_errors = require('./errors');\n/**\n  * Client for sending requests to Recombee and getting replies\n  */\n\n\nclass ApiClient {\n  /**\n   * Construct the client\n   * @param {string} databaseId - ID of your database\n   * @param {string} publicToken - Corresponding public token\n   * @param {Object} options - Other custom options\n   */\n  constructor(databaseId, publicToken, options) {\n    this.databaseId = databaseId;\n    this.publicToken = publicToken;\n    this.options = options || {};\n    this.baseUri = this.options.baseUri || process.env.RAPI_URI || 'client-rapi.recombee.com';\n    this.useHttps = 'useHttps' in this.options ? this.options.useHttps : true;\n    this.async = 'async' in this.options ? this.options.async : true;\n  }\n  /**\n   * Send the request to Recombee\n   * @param {Request} request - Request to be sent\n   * @param {Object} callback - Optional callback (send returns Promise if omitted) \n   */\n\n\n  send(request, callback) {\n    var self = this;\n\n    if (callback === undefined && window.Promise) {\n      return new Promise(function (resolve, reject) {\n        self.send(request, function (err, result) {\n          err ? reject(err) : resolve(result);\n        });\n      });\n    }\n\n    var signedUrl = this._signUrl(request.path);\n\n    var url = (this.useHttps ? 'https://' : 'http://') + this.baseUri + signedUrl;\n    var xmlhttp = new XMLHttpRequest();\n    xmlhttp.open(\"POST\", url, this.async);\n    xmlhttp.setRequestHeader(\"Accept\", \"application/json\");\n    xmlhttp.setRequestHeader(\"Content-Type\", \"text/plain\");\n    if (this.async) xmlhttp.timeout = request.timeout;\n\n    xmlhttp.onreadystatechange = function () {\n      if (this.readyState == 4) {\n        if (this.responseText) {\n          if (this.status == 200) {\n            if (callback) return callback(null, JSON.parse(this.responseText));\n          } else {\n            if (callback) return callback(new api_errors.ResponseError(request, this.status, this.responseText));\n          }\n        }\n      }\n    };\n\n    xmlhttp.ontimeout = function () {\n      if (callback) return callback(new api_errors.TimeoutError(request));\n    };\n\n    xmlhttp.send(JSON.stringify(request.bodyParameters()));\n  }\n\n  _signUrl(req_part) {\n    let url = '/' + this.databaseId + req_part;\n    url += (req_part.indexOf(\"?\") == -1 ? \"?\" : \"&\") + \"frontend_timestamp=\" + parseInt(new Date().getTime() / 1000);\n    let shaObj = new jsSHA(\"SHA-1\", \"TEXT\");\n    shaObj.setHMACKey(this.publicToken, \"TEXT\");\n    shaObj.update(url);\n    url += \"&frontend_sign=\" + shaObj.getHMAC(\"HEX\");\n    return url;\n  }\n\n}\n\nexports.ApiClient = ApiClient;","map":{"version":3,"sources":["C:/xampp/htdocs/laravel-base/node_modules/recombee-js-api-client/src/api-client.js"],"names":["jsSHA","require","api_errors","ApiClient","constructor","databaseId","publicToken","options","baseUri","process","env","RAPI_URI","useHttps","async","send","request","callback","self","undefined","window","Promise","resolve","reject","err","result","signedUrl","_signUrl","path","url","xmlhttp","XMLHttpRequest","open","setRequestHeader","timeout","onreadystatechange","readyState","responseText","status","JSON","parse","ResponseError","ontimeout","TimeoutError","stringify","bodyParameters","req_part","indexOf","parseInt","Date","getTime","shaObj","setHMACKey","update","getHMAC","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst jsSHA = require(\"jssha\");\nconst api_errors = require('./errors');\n\n/**\n  * Client for sending requests to Recombee and getting replies\n  */\nclass ApiClient {\n\n  /**\n   * Construct the client\n   * @param {string} databaseId - ID of your database\n   * @param {string} publicToken - Corresponding public token\n   * @param {Object} options - Other custom options\n   */\n  constructor (databaseId, publicToken, options) {\n      this.databaseId = databaseId;\n      this.publicToken = publicToken;\n      this.options = options || {};\n      this.baseUri = this.options.baseUri || process.env.RAPI_URI || 'client-rapi.recombee.com';\n      this.useHttps = ('useHttps' in this.options) ? this.options.useHttps : true;\n      this.async = ('async' in this.options) ? this.options.async : true;\n  }\n\n  /**\n   * Send the request to Recombee\n   * @param {Request} request - Request to be sent\n   * @param {Object} callback - Optional callback (send returns Promise if omitted) \n   */\n  send(request, callback) {\n    var self = this;\n    if ( callback === undefined && window.Promise ) {\n      return new Promise(function (resolve, reject) {\n        self.send(request, function (err, result) {\n          err ? reject(err) : resolve(result)\n        })\n      })\n    }\n\n    var signedUrl = this._signUrl(request.path);\n    var url = ((this.useHttps) ? 'https://' : 'http://') + this.baseUri + signedUrl;\n\n    var xmlhttp = new XMLHttpRequest();\n    xmlhttp.open(\"POST\", url, this.async);\n    xmlhttp.setRequestHeader(\"Accept\", \"application/json\");\n    xmlhttp.setRequestHeader(\"Content-Type\", \"text/plain\");\n\n    if ( this.async )\n      xmlhttp.timeout = request.timeout;\n\n    xmlhttp.onreadystatechange = function() {\n      if ( this.readyState == 4 ) {\n        if ( this.responseText )  {\n          if ( this.status == 200 ) {\n            if ( callback )\n              return callback(null, JSON.parse(this.responseText));\n          }\n          else {\n            if ( callback )\n              return callback(new api_errors.ResponseError(request, this.status, this.responseText));\n          }\n        }\n      }\n    }\n    xmlhttp.ontimeout = function () {\n      if ( callback )\n        return callback(new api_errors.TimeoutError(request));\n    };\n\n    xmlhttp.send(JSON.stringify(request.bodyParameters()));\n  }\n\n  _signUrl (req_part) {\n    let url = '/' + this.databaseId + req_part;\n    url += (req_part.indexOf(\"?\") == -1 ? \"?\" : \"&\" ) + \"frontend_timestamp=\" + parseInt(new Date().getTime() / 1000);\n    \n    let shaObj = new jsSHA(\"SHA-1\", \"TEXT\");\n    shaObj.setHMACKey(this.publicToken, \"TEXT\");\n    shaObj.update(url);\n\n    url += \"&frontend_sign=\" + shaObj.getHMAC(\"HEX\");\n    return url;\n  }\n}\n\nexports.ApiClient = ApiClient"]},"metadata":{},"sourceType":"script"}